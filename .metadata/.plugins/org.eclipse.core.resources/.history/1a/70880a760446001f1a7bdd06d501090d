package xiang_134;

/* 建堆
 * 大頂堆
 */
public class MaxHeap {
	int[] array;
	int size;

	public MaxHeap(int capacity) {
		this.array = new int[capacity];
	}

	// 刪除堆頂元素 Returns:堆頂元素
	public int poll() {

	}

	// 刪除指定索引處元素 Params:index-索引 Returns:被刪除元素
	public int poll(int index) {

	}

	// 獲取堆頂元素 Params:堆頂元素
	public int peek() {

	}

	// 將inserted 元素上浮:直至offered 小於父元素或到堆影
	private void up(int offered) {
	}

	public MaxHeap(int[] array) {
		this.array = array;
		this.size =array.length;
	}

	// 建堆
	private void heapify() {
		// 如何找到最後非葉子結點 size >>>1-1
		for (int i = size / 2 - 1; i >= 0; i--) {
			down(i);
		}
	}

	// 刪除元素 Params:index-待刪除元素索引
	public void remove(int index) {

	}

	// 將parent 索引處的元素下潛,與兩個孩子較大者交換,直至沒孩子或孩子沒他大
	private void down(int parent) {
		int left = parent * 2 + 1;
		int right = left + 1;
		int max = parent;
		if (left < size && array[left] > array[max]) {
			max = left;
		}
		if (right < size && array[right] > array[max]) {
			max = right;
		}

		if (max != parent) { // 找到更大的孩子
			swap(max, parent);
			down(max);
		}

	}

	private void swap(int i, int j) {
		int t = array[i];
		array[i] = array[j];
		array[j] = t;
	}
}
